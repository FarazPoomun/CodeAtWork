
@{
    ViewBag.Title = "ChannelDetail";
    Layout = "~/Views/Shared/CodeAtWorkAppLayout.cshtml";
}
<link href='https://fonts.googleapis.com/css?family=Comfortaa' rel='stylesheet'>
<link href="~/Content/CodeAtWorkApp/ChannelDetail.css" rel="stylesheet" />
<script src="~/Scripts/jquery-3.3.1.min.js"></script>
<script src="~/Scripts/CodeAtWorkApp/SharedAppJs.js"></script>
<div id="ChannelDetailWrapper">

    <div id="ChannelDetailHeaderPane">
        <div id="HeaderPaneWrittings">
            <h1 style="font-family:comfortaa" id="ChannelName">@ViewBag.ChannelName</h1>
            <p id="ChannelDesc">@ViewBag.CreatedBy</p>
        </div>
        <div id="ChannelPaneBtns">
            <div>
                <div style="float:left;  margin-left: 4%;">
                    <button class="blueBtn" onclick="OpenAddContentModal(1)"> <i style="font-size:1rem" class="fas fa-plus"></i> Add Contents</button>
                    <svg role="img" viewBox="0 0 24 24" class="optSvgHeader" onclick="OpenChannelMenu()" id="OptMenuBtn"><path fill="currentColor" fill-rule="evenodd" d="M6 14.5a2 2 0 110-4 2 2 0 010 4zm12 0a2 2 0 110-4 2 2 0 010 4zm-6 0a2 2 0 110-4 2 2 0 010 4z"></path></svg>
                    <div id="optChannelMenu">
                        <ul class="optMenuList">

                            <li onclick="deleteChannels()">Delete</li>
                            <li>Share <input type="checkbox" class="optMenuListRight" id="IsShared" onchange="IsSharedChanged(this)"></li>
                        </ul>
                    </div>
                </div>
                <div style="float:right;margin-right: 1%;">
                    <button class="blueBtn" onclick="OpenAddContentModal(2)"> <i style="font-size:1rem" class="fas fa-users"></i> Share Channel</button>
                </div>
            </div>
        </div>
    </div>

    <div id="AddContentsModal">
        <div><i class="fas fa-times CloseModal" onclick="CloseAddContentModal()"></i></div>
        <div id="AddingContentToChannelDIV">
            <div id="ChannelDetailTable">
                <div class="selectedModelChannelSection" onclick="toggleModalSelectedDiv(this, 1)">
                    Videos
                </div>
                <div onclick="toggleModalSelectedDiv(this, 2)">
                    Path
                </div>
                <div>
                </div>
            </div>
            <div>
                <div>
                    <input type="text" name="search" class="ModalSearch" placeholder="Start typing to filter videos.." onkeyup="FilterListOfVids(this)">
                </div>
                <div class="ModalScreenshots" id="FilteredVidsGrid">
                </div>

                <div id="FilteredPathPanes">
                </div>
            </div>
        </div>
        <div id="SharingChannelDIV">
            <div class="optMenuChannelDiv1" style="border-bottom:none">
                <input type="text" placeholder="Enter emails to share" class="ShareAddBar" id="userEmail">
                <button type="submit" class="ShareAddBtn" onclick="SubscribeUserToChannel()"><i class="fas fa-plus"></i></button>
                <a id="validationMsg" style="display:none;"></a>
            </div>

            <div class="ph3 mt4" id="subscribedUserToChannel">
                <a id="Pill_1" class="f6 br-pill ba ph3 pv2 mb2 dib isSubscribed">.Net <i class="fas fa-times removePill" onclick="unsubscribeUser(1)"></i></a>
            </div>
        </div>
    </div>

    <div>
        <div id="ChannelDetailTable">
            <div class="selectedChannelSection" onclick="toggleSelectedDiv(this, 1)">
                Videos
            </div>
            <div onclick="toggleSelectedDiv(this, 2)">
                Path
            </div>
            <div>
            </div>
        </div>



        <div id="ChannelContents">
            <div class="HomeScreenshots" id="CurrentChanelVideos">
                @ViewBag.ChannelVideos
            </div>
            <div id="PathPanes">
            </div>
        </div>
    </div>
</div>


<script>
    function SubscribeUserToChannel() {
        var email = document.getElementById("userEmail").value;
        if (!IsNullOrEmpty(email)) {
            $("#validationMsg").css("display", "none");
            var subscribeUserPost = $.post('/CodeAtWorkApp/SubscribeUserToChannel', { channelId: '@ViewBag.UserChannelId', email: email });
            Promise.all([subscribeUserPost]).then((result) => {
                if (result && result[0] && result[0].HasValidationFailed) {
                    document.getElementById("validationMsg").innerHTML = result[0].ValidationMsg;
                    $("#validationMsg").slideDown();
                }
                else {
                    document.getElementById("subscribedUserToChannel").innerHTML += result[0].AdditionalMsg;
                    document.getElementById("userEmail").value = "";
                    }
            });
        }
        else {
            document.getElementById("validationMsg").innerHTML = 'Enter an email';
            $("#validationMsg").slideDown();
        }
    }

    function unsubscribeUser(pillId) {
        var subscribeUserPost = $.post('/CodeAtWorkApp/UnsubscribeUserToChannel', { channelSubscribedUserId: pillId});
            Promise.all([subscribeUserPost]).then(() => {
                $("#Pill_" + pillId).remove();
            });
    }

    var isPathPulled = false;

    function AddToChannel(vidId) {
        var ajaxPost = $.post('/CodeAtWorkApp/AddVideoToChannel', { videoId: vidId, channelId: '@ViewBag.UserChannelId'});
        Promise.all([ajaxPost]);
    }

    function OpenAddContentModal(tabId) {
        var addContent = $("#AddingContentToChannelDIV");
        var shareContent = $("#SharingChannelDIV");

        if (tabId == 1) {
            $(shareContent).css("display", "none");
            $("#AddContentsModal").show();
            $(addContent).css("display", "block");
        }
        else {
            var subscribeUserPost = $.post('/CodeAtWorkApp/GetSubscribeUserToChannel', { channelId: '@ViewBag.UserChannelId'});
            Promise.all([subscribeUserPost]).then((result) => {
                document.getElementById("subscribedUserToChannel").innerHTML = result;
                $(addContent).css("display", "none");
                $("#AddContentsModal").show();
                $(shareContent).css("display", "block");
            });
        }
    }

    function viewPath(pathId) {
          var url = '@Url.Action("PathDetails", "CodeAtWorkApp", new { pathId = "__id" })';
        var New = url.replace("__id", pathId)
        window.open(New, "_self");
    }

    function FilterListOfVids(elem) {
        var searchTxt = elem.value;
        if (!IsNullOrEmpty(searchTxt)) {
            var VidAjaxPost = $.post('/CodeAtWorkApp/GetFilteredVideos', { userChannelId: '@ViewBag.UserChannelId', filterBy: searchTxt });

            var PathAjaxPost = $.post('/CodeAtWorkApp/GetFilteredPaths', { userChannelId: '@ViewBag.UserChannelId', filterBy: searchTxt });
            Promise.all([VidAjaxPost, PathAjaxPost]).then((result) => {
                document.getElementById("FilteredVidsGrid").innerHTML = result[0];
                document.getElementById("FilteredPathPanes").innerHTML = result[1];
            });
        }
    }

    function AddPathToChannel(pathId) {
        var ajaxPost = $.post('/CodeAtWorkApp/AddPathToChannel', { channelId: '@ViewBag.UserChannelId', pathId: pathId });
        Promise.all([ajaxPost]);
    }

    function CloseAddContentModal() {
        $("#AddContentsModal").hide();
    }

    if ('@ViewBag.IsShared' === 'True')
        document.getElementById("IsShared").checked = true;

    document.addEventListener('click', function (event) {
        var clickedElem = event.target;
        if (!(clickedElem == $("#OptMenuBtn")[0] || event.path.includes($("#optChannelMenu")[0])) && $('#optChannelMenu').is(':visible')) {
            $("#optChannelMenu").slideUp("fast");
        }
    }, false);

    function OpenChannelMenu() {

        if ($('#optChannelMenu').is(':visible'))
        {
            $("#optChannelMenu").slideUp("fast");
        }
        else {
            $("#optChannelMenu").slideDown("fast");
        }
    }

    function IsSharedChanged(elem) {
        var ajaxPost = $.post('/CodeAtWorkApp/UpdateIsShared', { UserChannelId: '@ViewBag.UserChannelId', isShared: elem.checked });
        Promise.all([ajaxPost]).then(() => {

        });
    }

    function deleteChannels() {
        var channelIdsToDelete = [];
        channelIdsToDelete.push('@ViewBag.UserChannelId');

        var ajaxPost = $.post('/CodeAtWorkApp/DeleteChannels', { channelIdsToDelete: channelIdsToDelete });
        Promise.all([ajaxPost]).then(() => {
         var url = '@Url.Action("Channels", "CodeAtWorkApp")';
            window.open(url, "_self");
        });
    }


    function toggleSelectedDiv(elem, tabId) {
        var existingElem = document.getElementsByClassName("selectedChannelSection")[0];
        $(existingElem).removeClass("selectedChannelSection");
        $(elem).addClass("selectedChannelSection");
        var pathElem = document.getElementById("PathPanes");
        var videoElem  = document.getElementById("CurrentChanelVideos");

        if (tabId == 2) {
            if (!isPathPulled) {
                var ajaxPost = $.post('/CodeAtWorkApp/GetPathsPanePerChannelId', { channelId: '@ViewBag.UserChannelId'});
                Promise.all([ajaxPost]).then((results) => {
                    $(videoElem).css("display", "none");
                    $(pathElem).css("display", "block");
                    pathElem.innerHTML = results[0];
                });
            }
            else {
                $(videoElem).css("display", "none");
                $(pathElem).css("display", "block");
            }
        }
        else {
            $(videoElem).css("display", "grid");
            $(pathElem).css("display", "none");
        }
    }

    function toggleModalSelectedDiv(elem, tabId) {
        var existingElem = document.getElementsByClassName("selectedModelChannelSection")[0];
        $(existingElem).removeClass("selectedModelChannelSection");
        $(elem).addClass("selectedModelChannelSection");
        var filteredVidDiv = document.getElementById("FilteredVidsGrid");
        var filteredPathDiv = document.getElementById("FilteredPathPanes");
        if (tabId == 1) {
            $(filteredVidDiv).show();
            $(filteredPathDiv).hide();
        }
        else {
            $(filteredVidDiv).hide();
            $(filteredPathDiv).show();
        }
    }

    //Vids
    var globalVidId= 0;
    function OpenPlayer(id) {
    var url = '@Url.Action("AppPlayer", "CodeAtWorkApp", new { playById = "__id" })';
    var New = url.replace("__id", id)
    window.open(New, "_blank");
    }

    function AddNewChannel(vidId) {
        var elem = document.getElementById("ChannelAddBar_" + vidId);
        if (!IsNullOrEmpty(elem.value)) {
            var ajaxPost = $.post('/CodeAtWorkApp/AddAndLinkChannel', { channelName: elem.value, videoId: vidId });
            Promise.all([ajaxPost]).then((results) => {
                document.getElementById("ChannelAddBar_" + vidId).value = "";
                document.getElementById("ChannelList_" + vidId).innerHTML = results;
                var btn = document.getElementById("ChannelAddBtn_" + vidId);
                $(btn).css("pointer-events", "none");
                $(btn).css("background", "grey");
            });
        }
    }

    function AddOrRemoveChannelFromVid(elem, channelId, vidId) {
        var ajaxPost = $.post('/CodeAtWorkApp/AddOrRemoveChannelFromVid', { videoId: vidId, channelId: channelId, IsSelected: !elem.classList.contains("channelSelected")});
            Promise.all([ajaxPost]).then((results) => {
                document.getElementById("ChannelList_" + vidId).innerHTML = results;
            });
    }

    function EnableAddChannelBtn(elem, vidId) {
        var btn = document.getElementById("ChannelAddBtn_" + vidId);
        var val = elem.value;
        if (!IsNullOrEmpty(val)) {
            $(btn).css("pointer-events", "all");
            $(btn).css("background", "#0084bd");

        }
        else {
            $(btn).css("pointer-events", "none");
            $(btn).css("background", "grey");
        }
    }

    function toggleOptionMenu(vidId) {
        var x = document.getElementById("optMenu_" + vidId);
        if (x.style.display === "none" || x.style.display === "") {
            x.style.display = "block";
            globalVidId = vidId;
            document.addEventListener("click", menuHasOpenedEvnt);
        }
         else {
            document.removeEventListener("click", menuHasOpenedEvnt);
            x.style.display = "none";
                }
    }

    function menuHasOpenedEvnt(evt) {
        const elem = document.getElementById("optMenu_" + globalVidId);
        const parentElem = document.getElementById("opt_" + globalVidId);
        const child1 = document.getElementById("optMenuChannel_" + globalVidId);
        const child2 = document.getElementById("optMenuChannelBtn_" + globalVidId);

            let targetElement = evt.target; // clicked element

        do {
            if (targetElement == elem || targetElement == parentElem || targetElement == child1 || targetElement == child2) {
                    // This is a click inside. Do nothing, just return.
                    return;
                }
                // Go up the DOM
                targetElement = targetElement.parentNode;
        } while (targetElement);

        // This is a click outside.
        elem.style.display = "none";
        document.removeEventListener("click", menuHasOpenedEvnt);
    }

    function showOptChannel(vidId) {
        var x = document.getElementById("optMenuChannel_" + vidId);
        if (x.style.display === "none" || x.style.display === "") {
            x.style.display = "block";
            globalVidId = vidId;
            document.addEventListener("click", ChannelMenuHasOpenedEvnt);
            var ajaxPost = $.post('/CodeAtWorkApp/GetVideoChannels', { vidId: vidId });
            Promise.all([ajaxPost]).then((results) => {
                document.getElementById("ChannelList_" + vidId).innerHTML = results;
            });
        }
        else {
            document.removeEventListener("click", ChannelMenuHasOpenedEvnt);
            x.style.display = "none";
        }
    }

    function ChannelMenuHasOpenedEvnt(evt) {
        const elem = document.getElementById("optMenuChannel_" + globalVidId);
        const parentElem = document.getElementById("optMenuChannelBtn_" + globalVidId);
        let targetElement = evt.target; // clicked element

        do {
            if (targetElement == elem || targetElement == parentElem) {
                // This is a click inside. Do nothing, just return.
                return;
            }
            // Go up the DOM
            targetElement = targetElement.parentNode;
        } while (targetElement);

        // This is a click outside.
        elem.style.display = "none";
        document.removeEventListener("click", ChannelMenuHasOpenedEvnt);
    }

    //End of vids
</script>